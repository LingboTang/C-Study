1. Using C++ type casts, write a function that reverses the byte order of an int variable.
		See ReverseByte.cpp

2. Static_cast: Used for standard (numerical) conversions No run-time check


reinterpret_cast: Conversion from one pointer type to any other pointer type

const_cast:	 toggles status: const <-> non-const

dynamic_cast: Used for "walking up and down the type hierarchy"

				Is a non-trivial run-time check, which may slow down your program

				For it to work, the source type must be polymorphic

	
3. What are static variables defined outside any class definitions and functions?

	Helper function local to a certain file, protect it from other files access

4. What is the purpose of static class variables?
	
	persistent global variable constructed when defined function first executed.
	
	Thread-safe, can let multiple execution threads call simultaneously


5. What is the lifetime of static variables defined in functions?

	Constructed during the first call, reused thereafter,
	Destroyed in reverse order of their construction.

6. How can you enforce initializing order of global variables?
	
	Wrap global objects in access functions like so.
	Given that in Namespace

7. Explain the concept of operator overloading.
	
	Made the operators generic, then when you use those operator,
	there's no difference between built-in types and class types-
	we want to be able to define what operators do when applied to 
	our own classes.

8. Define operator arity, associativity, and precedence.

	arity: How many parameters the operators use
	associativity: Left or Right first?
	precedence: which operator get's evaluated first

9. What is the effect of the following code: int a, *p, *q; ... a = *p++ - *--q;

	Define an int value a, allocate 4 bytes of int to a tmp register
	Define an int pointer p, allocate the 4 bytes address to the tmp register
	Define an int pointer q, allocate the 4 bytes address to the tmp register

	*p++ means *(p++), *--q means *(q--)
	Therefore, a= *p++ - *q-- means, evaluate a to be substraction between the address of p+1
	and q-1

10. What is the difference between global operators and class operators?

	Global operators: Operator overloaded member function gets invoked on the first operand.

	Class operators:Can be considered methods that are invoked when the lhs of binary operation is an object and the rhs is another object or POD, or when the argument of a unary operator is an object. The compiler internally rewrites operators into member function calls.

	
11. Why does the vector implementation require const and non-const versions of operator[] ?


	const: member is protected, will not be changed by call
	non_const: returns reference so that elements can be changed

	return a[0], only works if const definition is provided for V[].



12. What is the difference between the prefix ++ and postfix ++ operators?

	For number types, both increment i, but the VALUE of both expressions is differnt
	the value of ++i is the REFERENCE  to the variable
	the value of i++ is the VALUE of the variable BEFORE increment
	
13. How to enforce evaluation order? Give two examples.
	
	x = x / ++x; => y=x; x = y/ ++x
	
	y = f() + g(); (if f and g access global variables things can get tricky)
	
	=> x=f(); y = x+g();

14. Why is it a bad idea to overload global operator&&(int, int) ?


	Because this certainly will confuse readers of your code.
	
	Recall that & takes the address of a variable, && and || are 
	Boolean short-cut operators, and, is the sequence operator.
	Imagine what happens when a "clever" team member changes the meaning
	of those operators
