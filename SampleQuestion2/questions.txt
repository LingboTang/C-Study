What is the purpose of constructors,destructors,copy constructors, and
assignment operators?

	constructors: To initialize objects when they are created automatically
	destructors: To cleaning up when they are no longer needed (leaves the scope or is deleted) automatically
	copy constructors: Construct an object by copying another object.
		It would be a waste of time if we first call the constructor and then 		overwrite the result with the state of another object.
		Also, simply copying data memebers bitwise may not work. For instance, if we just copied pointers, both pointers in a and b would point to the smae object, i.e they share a resource. Often thisis not acceptable.
	Assignment Operators: We want to overwrite an existing object with another object. And thus we have to release resources in the exiting object at first.
	
What happens if you make a constructor private?

Then the data/method initialized by the constuctor will only be accessible to the methods but not to the object owner.

What exactly happens when Foo*p = new Foo; is executed?

	A default constructor was created for a Foo object with size of 1 Foo.

	If we don't define a destructor, the compiler creates a default destructor for us, which only calls the destructors of all non_POD members.

Describe the effect of #pragma once.

	Prevents double inclusion

What does the default destructor exatcly do?

	The detault destructor will destruct all non-POD members.

Why shall the assignment operator return a reference to *this?

	this is a pointer to the object and *this refers to the object itself.

Describe the self-assignment problem.

It will releases memory associated with v, and then uses it.
So the memory is gone.

To fix that is do nothing:

	X & operator = (const X &rhs)
	{
		if (this == &rhs) {
			return *this;
		}
		return *this;
	}

What purpose do constructor initialization lists serve?

	In the constructor without initialization list, x,y are first constructed (all non-POD variables are constructed before the constructor code is executed), and then the AOs are executed, which may first free the resourcese that were allocated before, which is wasteful.

	With initialization list, x,y are copy-constructed, which is usually faster

POD Constructor will be called first.
struct Y
{
	Y() { cout << "C";}
	Y() { cout << "D";}
	X a,b;
}


int main()
{
	X c,d;
	Y e,f;
}


struct X
{
	int a; // POD
	Y y; //Constructor
	Z *p; // pointer to non-shared Z variable
	
	//Constructor
	X()
	{ a = 0; p = new Z;}
	
	//CC
	X(const X &rhs):
		a(rhs.a),
		y(rhs.y)
	{
		if (!rhs.p) {
			p = 0;
			return;
		}
		return;
	}
	
	//AO
		a = rhs.a;
		y = rhs.y;
		
		if (!rhs.p) {
			delete p;
			p = 0;
			return *this;
		}
		
		if (!p) {
			p = new Z(*rhs.p)
		} else {
			p = new Z;
		}
		return *this;
}
